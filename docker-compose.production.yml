version: '3.8'

services:
  # Core API Service
  harmony-api:
    build:
      context: .
      dockerfile: Dockerfile.production
    image: harmony-sparc:production
    container_name: harmony-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - API_PORT=3001
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/harmony_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - BLOCKCHAIN_RPC_URL=${BLOCKCHAIN_RPC_URL}
      - ENABLE_SWAGGER=false
      - ENABLE_AUTH=true
      - ENABLE_RATE_LIMIT=true
      - ENABLE_CACHE=true
      - ENABLE_METRICS=true
      - CORS_ORIGINS=https://app.harmony-sparc.com,https://dashboard.harmony-sparc.com
    ports:
      - "3000:3000"
      - "3001:3001"
      - "9090:9090"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - harmony-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Database Service
  postgres:
    image: postgres:15-alpine
    container_name: harmony-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=harmony_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - harmony-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: harmony-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - harmony-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Blockchain Node (Hardhat for development, replace with actual node for production)
  blockchain-node:
    image: trufflesuite/ganache:latest
    container_name: harmony-blockchain
    restart: unless-stopped
    ports:
      - "8545:8545"
    environment:
      - GANACHE_ACCOUNTS=${GANACHE_ACCOUNTS:-10}
      - GANACHE_MNEMONIC=${GANACHE_MNEMONIC}
      - GANACHE_NETWORK_ID=${GANACHE_NETWORK_ID:-1337}
      - GANACHE_PORT=8545
      - GANACHE_HOST=0.0.0.0
    volumes:
      - blockchain_data:/app/data
    networks:
      - harmony-network
    command: >
      ganache
      --accounts ${GANACHE_ACCOUNTS:-10}
      --mnemonic "${GANACHE_MNEMONIC}"
      --networkId ${GANACHE_NETWORK_ID:-1337}
      --port 8545
      --host 0.0.0.0
      --deterministic
      --db /app/data
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: harmony-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - harmony-api
    networks:
      - harmony-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: harmony-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - harmony-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: harmony-grafana
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_ADMIN_USER=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - harmony-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Log Aggregation - ELK Stack (Elasticsearch)
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: harmony-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - harmony-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Log Processing - Logstash
  logstash:
    image: logstash:8.11.0
    container_name: harmony-logstash
    restart: unless-stopped
    volumes:
      - ./logs:/usr/share/logstash/logs:ro
      - ./monitoring/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    ports:
      - "5000:5000"
    depends_on:
      - elasticsearch
    networks:
      - harmony-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Log Visualization - Kibana
  kibana:
    image: kibana:8.11.0
    container_name: harmony-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - harmony-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

networks:
  harmony-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  blockchain_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local