version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: eesystem-backend
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001
      - REDIS_URL=redis://redis:6379/0
      - SQLITE_DB_PATH=/app/data/eesystem_memory.db
      # AstraDB Configuration (set in .env file)
      - ASTRA_DB_ID=${ASTRA_DB_ID}
      - ASTRA_DB_REGION=${ASTRA_DB_REGION}
      - ASTRA_DB_TOKEN=${ASTRA_DB_TOKEN}
      - ASTRA_DB_KEYSPACE=${ASTRA_DB_KEYSPACE}
      # AI Services (set in .env file)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - REQUESTY_AI_API_KEY=${REQUESTY_AI_API_KEY}
      # Security
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    volumes:
      - ./backend:/app
      - backend_data:/app/data
      - backend_logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - eesystem-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: eesystem-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
      - REACT_APP_ENVIRONMENT=development
      - REACT_APP_BRAND_NAME=EESystem
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - eesystem-network
    restart: unless-stopped

  # Redis for Caching and Session Storage
  redis:
    image: redis:7.2-alpine
    container_name: eesystem-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - eesystem-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for Development (backup to AstraDB)
  postgres:
    image: postgres:15-alpine
    container_name: eesystem-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=eesystem_dev
      - POSTGRES_USER=eesystem_user
      - POSTGRES_PASSWORD=eesystem_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - eesystem-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U eesystem_user -d eesystem_dev"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: eesystem-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - eesystem-network
    restart: unless-stopped

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: eesystem-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - eesystem-network
    restart: unless-stopped

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:10.1.0
    container_name: eesystem-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=eesystem_grafana
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - eesystem-network
    restart: unless-stopped

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: eesystem-celery-worker
    command: celery -A backend.core.celery worker --loglevel=info
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - backend_data:/app/data
    depends_on:
      - redis
      - backend
    networks:
      - eesystem-network
    restart: unless-stopped

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: eesystem-celery-beat
    command: celery -A backend.core.celery beat --loglevel=info
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - backend_data:/app/data
    depends_on:
      - redis
      - backend
    networks:
      - eesystem-network
    restart: unless-stopped

  # Flower for Celery Monitoring
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: eesystem-flower
    command: celery -A backend.core.celery flower
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - celery_worker
    networks:
      - eesystem-network
    restart: unless-stopped

volumes:
  backend_data:
  backend_logs:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  eesystem-network:
    driver: bridge