# Default values for agentflow-api
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Image configuration
image:
  registry: docker.io
  repository: agentflow/api
  tag: "latest"
  pullPolicy: Always
  pullSecrets: []

# Deployment configuration
replicaCount: 3

nameOverride: ""
fullnameOverride: ""

# Service account configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod annotations and labels
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "3000"
  prometheus.io/path: "/metrics"

podLabels: {}

# Security context
podSecurityContext:
  fsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  capabilities:
    drop:
    - ALL

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 80
  annotations: {}
  labels: {}

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://agentflow.ai,https://www.agentflow.ai"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET,POST,PUT,DELETE,OPTIONS,HEAD"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/cors-max-age: "86400"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: api.agentflow.ai
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: agentflow-api-tls
      hosts:
        - api.agentflow.ai

# Resource limits and requests
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 256Mi

# Nginx sidecar configuration
nginx:
  enabled: true
  image:
    repository: nginx
    tag: "1.25-alpine"
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi

# Autoscaling configuration
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 4
        periodSeconds: 60

# Vertical Pod Autoscaler
vpa:
  enabled: true
  updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: agentflow-api
      maxAllowed:
        cpu: 2000m
        memory: 4Gi
      minAllowed:
        cpu: 100m
        memory: 128Mi

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Node selector and affinity
nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - agentflow-api
        topologyKey: kubernetes.io/hostname

# Probes configuration
livenessProbe:
  httpGet:
    path: /health
    port: 3000
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: 3000
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

startupProbe:
  httpGet:
    path: /health
    port: 3000
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30

# Environment variables
env:
  NODE_ENV: "production"
  PORT: "3000"
  LOG_LEVEL: "info"
  CORS_ORIGINS: "https://agentflow.ai,https://www.agentflow.ai"
  RATE_LIMIT_WINDOW: "900000"
  RATE_LIMIT_MAX: "1000"
  HEALTH_CHECK_INTERVAL: "30"
  METRICS_ENABLED: "true"
  CACHE_TTL: "300"
  REQUEST_TIMEOUT: "30000"
  GRACEFUL_SHUTDOWN_TIMEOUT: "10000"

# Secrets (base64 encoded)
secrets:
  # Replace with actual encoded secrets
  DB_PASSWORD: "cGFzc3dvcmQ="
  JWT_SECRET: "c3VwZXItc2VjcmV0LWp3dC1rZXk="
  API_KEY: "YWdlbnRmbG93LWFwaS1rZXk="
  REDIS_PASSWORD: "cmVkaXMtcGFzc3dvcmQ="
  ENCRYPTION_KEY: "ZW5jcnlwdGlvbi1rZXktMzItYnl0ZXM="

# Network policy
networkPolicy:
  enabled: true
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      - namespaceSelector:
          matchLabels:
            name: monitoring
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: agentflow-api
      ports:
      - protocol: TCP
        port: 3000
      - protocol: TCP
        port: 80
  egress:
    - to: []
      ports:
      - protocol: TCP
        port: 53
      - protocol: UDP
        port: 53
    - to: []
      ports:
      - protocol: TCP
        port: 443
      - protocol: TCP
        port: 80

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    path: /metrics
    port: 3000
    labels: {}
    annotations: {}

# Persistence (if needed)
persistence:
  enabled: false
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 8Gi
  annotations: {}

# Init containers
initContainers: []

# Extra containers
extraContainers: []

# Extra volumes
extraVolumes: []

# Extra volume mounts
extraVolumeMounts: []