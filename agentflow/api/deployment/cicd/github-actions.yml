name: AgentFlow API CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/agentflow/api/**'
      - 'deployment/**'
      - '.github/workflows/agentflow-api.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/agentflow/api/**'
      - 'deployment/**'
  release:
    types: [ published ]

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: agentflow/api
  HELM_VERSION: '3.12.0'
  KUBERNETES_VERSION: '1.28'

jobs:
  # Security and Quality Checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'src/agentflow/api'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=src/agentflow/api/package.json

  # Code Quality and Testing
  test:
    name: Test & Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: src/agentflow/api/package-lock.json

      - name: Install dependencies
        run: |
          cd src/agentflow/api
          npm ci

      - name: Run linting
        run: |
          cd src/agentflow/api
          npm run lint

      - name: Run type checking
        run: |
          cd src/agentflow/api
          npx tsc --noEmit

      - name: Run tests
        run: |
          cd src/agentflow/api
          npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: src/agentflow/api/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Run security audit
        run: |
          cd src/agentflow/api
          npm audit --audit-level=moderate

  # Build and Push Docker Image
  build:
    name: Build & Push Image
    runs-on: ubuntu-latest
    needs: [security, test]
    if: github.event_name == 'push' || github.event_name == 'release'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: src/agentflow/api
          file: src/agentflow/api/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

      - name: Sign image with cosign
        if: github.event_name == 'release'
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.0'

      - name: Sign container image
        if: github.event_name == 'release'
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://api-staging.agentflow.ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBERNETES_VERSION }}

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > $HOME/.kube/config

      - name: Deploy to staging
        run: |
          helm upgrade --install agentflow-api-staging \
            deployment/helm/agentflow-api \
            --namespace agentflow-staging \
            --create-namespace \
            --values deployment/helm/agentflow-api/values-staging.yaml \
            --set image.tag=${{ needs.build.outputs.image-tag }} \
            --set ingress.hosts[0].host=api-staging.agentflow.ai \
            --wait --timeout=600s

      - name: Run smoke tests
        run: |
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=agentflow-api -n agentflow-staging --timeout=300s
          kubectl run --rm -i --restart=Never smoke-test --image=curlimages/curl:latest -- \
            curl -f https://api-staging.agentflow.ai/health

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'
    environment:
      name: production
      url: https://api.agentflow.ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBERNETES_VERSION }}

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > $HOME/.kube/config

      - name: Deploy to production
        run: |
          helm upgrade --install agentflow-api \
            deployment/helm/agentflow-api \
            --namespace agentflow \
            --create-namespace \
            --values deployment/helm/agentflow-api/values-production.yaml \
            --set image.tag=${{ needs.build.outputs.image-tag }} \
            --wait --timeout=600s

      - name: Run production smoke tests
        run: |
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=agentflow-api -n agentflow --timeout=300s
          kubectl run --rm -i --restart=Never smoke-test --image=curlimages/curl:latest -- \
            curl -f https://api.agentflow.ai/health

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "AgentFlow API deployed successfully to production! ðŸš€"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-staging, deploy-production]
    steps:
      - name: Delete old images
        run: |
          echo "Cleanup job - would delete old container images"
          # Add cleanup logic here